/*! AlphabetSearch for DataTables v1.2.7
   * 2014 SpryMedia Ltd - datatables.net/license
   * Gyrocode LLC - MIT License
   */
  (function($)
  {
    var currentDT = '';
    var currentDTid = '';
    $.fn.dataTable.Api.register("alphabetSearch()", function(searchTerm)
    {
      this.iterator("table", function(context)
      {
        context.alphabetSearch.letter = searchTerm;
      });
      return this;
    });
    $.fn.dataTable.Api.register("alphabetSearch.recalc()", function()
    {
      this.iterator("table", function(context)
      {
        draw(new $.fn.dataTable.Api(context), $("div.alphabet", this.table().container()), context);
      });
      return this;
    });
    $.fn.dataTable.ext.search.push(function(context, searchData)
    {
      if (!context.hasOwnProperty("alphabetSearch"))
      {
        return true;
      }
      if (!context.alphabetSearch.letterSearch)
      {
        return true;
      }

      if (context.alphabetSearch.combine_columns) {
        var combinedLetterArray = [];
        $.each(context.alphabetSearch.combine_columns, function(column_index, index) {
          var combine_letter = searchData[column_index].toString().replace(/<.*?>/g, "").charAt(0).toUpperCase();
          combinedLetterArray.push(combine_letter)
        });
        
        var letter = searchData[context.alphabetSearch.column].toString().replace(/<.*?>/g, "").charAt(0).toUpperCase();
        if (context.alphabetSearch.letterSearch !== "#")
        {
          // if (letter === context.alphabetSearch.letterSearch)
          if ($.inArray(context.alphabetSearch.letterSearch, combinedLetterArray) !== -1)
          {
            return true;
          }
        }
        else
        {
          if(/^[a-zA-Z]*$/.test(letter) == false)
          // if (/\d/.test(letter))
          {
            return true;
          }
        }
      } else {
        var letter = searchData[context.alphabetSearch.column].toString().replace(/<.*?>/g, "").charAt(0).toUpperCase();
        if (context.alphabetSearch.letterSearch !== "#")
        {
          if (letter === context.alphabetSearch.letterSearch)
          {
            return true;
          }
        }
        else
        {
          if(/^[a-zA-Z]*$/.test(letter) == false)
          // if (/\d/.test(letter))
          {
            return true;
          }
        }
      }
      return false;
    });
    $.fn.dataTable.ext.order["alphabetSearch"] = function(context, col)
    {
      var orderColumn = this.api().order()[0][0];
      var orderMethod = this.api().order()[0][1];
      if (orderColumn !== context.alphabetSearch.column)
      {
        context.alphabetSearch.pass = 0;
      }
      var data = this.api().column(col,
      {
        order: "index"
      }).data().map(function(value, index)
      {
        var text = value.toString().replace(/<.*?>/g, "");
        var letter = text.charAt(0).toUpperCase();

        if (orderColumn === context.alphabetSearch.column)
        {
          if (context.alphabetSearch.pass === 0)
          {
            return "";
          }
          else
          {
            if (orderMethod === "asc")
            {
              return text;
            }
            else
            {
              var textReversed = "";
              if (context.alphabetSearch.letterSearch)
              {
                for (var i = 0; i < text.length; i++)
                {
                  textReversed += String.fromCharCode(65535 - text.charCodeAt(i));
                }
              }
              else
              {
                for (var i = 0; i < text.length; i++)
                {
                  textReversed += (i) ? text.charAt(i) : String.fromCharCode(65535 - text.charCodeAt(i));
                }
              }
              return textReversed;
            }
          }
        }
        else
        {
          return letter;
        }
      });
      if (orderColumn === context.alphabetSearch.column)
      {
        if (!context.alphabetSearch.pass)
        {
          context.alphabetSearch.pass = 0;
        }
        context.alphabetSearch.pass = (context.alphabetSearch.pass + 1) % 2;
      }
      return data;
    };

    function bin(data)
    {
      var letter, bins = {};
      for (var i = 0, ien = data.length; i < ien; i++)
      {
        letter = data[i].toString().replace(/<.*?>/g, "").charAt(0).toUpperCase();
        // if (/\d/.test(letter))
        if(/^[a-zA-Z]*$/.test(letter) == false)
        {
          letter = "#";
        }
        if (bins[letter])
        {
          bins[letter]++;
        }
        else
        {
          bins[letter] = 1;
        }
      }
      return bins;
    }

    function draw(table, alphabet, context)
    {
      alphabet.empty();
      if (context.oLanguage.alphabetSearch.infoDisplay !== "")
      {
        $('<span class="alphabet-info-display"></span>').html(context.oLanguage.alphabetSearch.infoDisplay).appendTo(alphabet);
      }
      
      if (context.alphabetSearch.combine_columns) {
        var combinedDataArray = [];
        var combinedDataObj = {};
        $.each(context.alphabetSearch.combine_columns, function(column_index, index) {
          dynamic_merge_data = table.column(column_index , { search: "applied"}).data();
          combinedDataArray.push(dynamic_merge_data)
        });
        
        $.each(combinedDataArray, function (i, o) {
          $.extend(combinedDataObj, o)
        })
        var columnData = combinedDataObj;
      } else {
        var columnData = table.column(context.alphabetSearch.column,
        {
          search: "applied"
        }).data();
      }

      var bins = bin(columnData);
      var all_count = context.aiDisplay.length;
      if (context.alphabetSearch.alpha_count)
      {
        var bins = context.alphabetSearch.alpha_count;
        var all_count = context.alphabetSearch.alpha_count['0'];
      }

      var alphabetList = $("<div class='alphabet-table-view'/>");
      // $("<a class='alpha-box'/>").attr("data-index", 0).attr("href", "javascript:void(0;").data("letter", "").data("match-count", columnData.length).addClass(((!context.alphabetSearch.letter) ? "active" : "")).html("<span class='active-arrow'>All<br><font style='font-size:10px;'>" + all_count + "</font></span>").wrap($('<div class="m-r-10 pb-3"/>').addClass(((!context.alphabetSearch.letter) ? "alpha-div-active" : ""))).parent().appendTo(alphabetList);
      initial_letter = (context.alphabetSearch.letter ? context.alphabetSearch.letter : 'A')
      if (!context.alphabetSearch.letter) {
        initial_letter = '0'
      }
      for (var i = 0; i < context.oLanguage.alphabetSearch.alphabet.length; i++)
      {
        var letter = context.oLanguage.alphabetSearch.alphabet[i];
        $("<a class='alpha-box'/>").attr("data-index", letter).attr("href", "javascript:void(0;").data("letter", letter).data("match-count", bins[letter] || 0).addClass((!bins[letter] ? "empty" : "") + ((initial_letter != '0' && initial_letter === letter) ? " active" : "")).html("<span class='active-arrow'>" + (letter == '#' ? 'Ot' : letter) + "<br><font style='font-size:10px;'>" + (bins[letter] || 0) + "</font></span>").wrap($('<div class="m-r-10 pb-3"/>').addClass((context.alphabetSearch.no_all_option) ? " no_all " : "").addClass((initial_letter === letter) ? "alpha-div-active" : "")).parent().appendTo(alphabetList);
      }
      if (!context.alphabetSearch.no_all_option) {
        $("<a class='alpha-box'/>").attr("data-index", 0).attr("href", "javascript:void(0;").data("letter", "0").data("match-count", columnData.length).addClass((all_count == 0 ? "empty" : "") + ((initial_letter === '0') ? " active" : "")).html("<span class='active-arrow'>All<br><font style='font-size:10px;'>" + all_count + "</font></span>").wrap($('<div class="m-r-10 pb-3"/>').addClass((context.alphabetSearch.no_all_option) ? " no_all " : "").addClass(((initial_letter === '0') ? "alpha-div-active" : ""))).parent().appendTo(alphabetList);
      }
      alphabetList.appendTo(alphabet);
      $('<div class="alphabet-info"></div>').appendTo(alphabet);
      if (context.alphabetSearch.letter)
      {
        context.alphabetSearch.letterSearch = context.alphabetSearch.letter;
        table.draw();
        context.alphabetSearch.letterSearch = "";
      }
      table.one("search.dt.dtAlphabetSearch", function(e, context)
      {
        var api = new $.fn.dataTable.Api(context);
        api.alphabetSearch.recalc();
      });
    }

    $.fn.dataTable.AlphabetSearch = function(context)
    {
      var table = new $.fn.dataTable.Api(context);
      currentDT = new $.fn.dataTable.Api(context);
      var alphabet = $('<div class="alphabet pt-1"/>');
      context.oLanguage.alphabetSearch = $.extend(
      {
        "alphabet": "ABCDEFGHIJKLMNOPQRSTUVWXYZ#",
        "infoDisplay": "Display:",
        "infoAll": "All"
      }, ((context.oLanguage.alphabetSearch) ? context.oLanguage.alphabetSearch :
      {}));
      context.oLanguage.alphabetSearch.alphabet.toUpperCase();
      context.alphabetSearch = $.extend(
      {
        column: 0
      }, $.isPlainObject(context.oInit.alphabetSearch) ? context.oInit.alphabetSearch :
      {},
      {
        letter: "",
        letterSearch: "",
        pass: 0
      });
      if (context.alphabetSearch.column >= 0 && context.alphabetSearch.column < context.aoColumns.length)
      {
        context.aoColumns[context.alphabetSearch.column].sSortDataType = "alphabetSearch";
      }
      if (context.hasOwnProperty("aaSortingFixed") && typeof context.aaSortingFixed === "object")
      {
        if ($.isArray(context.aaSortingFixed))
        {
          if (context.aaSortingFixed.length && !$.isArray(context.aaSortingFixed[0]))
          {
            context.aaSortingFixed = [
              [context.alphabetSearch.column, "asc"], context.aaSortingFixed
            ];
          }
          else
          {
            // context.aaSortingFixed.unshift([context.alphabetSearch.column, "asc"]);
          }
        }
        else
        {
          if (!context.aaSortingFixed.hasOwnProperty("pre"))
          {
            context.aaSortingFixed.pre = [];
          }
          if (context.aaSortingFixed.pre.length && !$.isArray(context.aaSortingFixed.pre[0]))
          {
            context.aaSortingFixed.pre = [
              [context.alphabetSearch.column, "asc"], context.aaSortingFixed.pre
            ];
          }
          else
          {
            // context.aaSortingFixed.pre.unshift([context.alphabetSearch.column, "asc"]);
          }
        }
      }
      else
      {
        context.aaSortingFixed = [context.alphabetSearch.column, "asc"];
      }
      draw(table, alphabet, context);
      alphabet.on("click", "a", function(e)
      {
        e.preventDefault();
        $('#'+currentDTid+'_alpha_letter').val($(this).data("letter"));
        alphabet.find(".active").removeClass("active");
        $(this).addClass("active");
        clickedLetter = $(this).data('letter') == '0' ? '' : $(this).data('letter');
        table.alphabetSearch(clickedLetter).draw();
      });
      alphabet.on("mouseenter", "a", function()
      {
        var $el = $(this);
        var el_pos = $el.position();
        var $alphabet_info = $(".alphabet-info", alphabet);
        $alphabet_info.html($el.data("match-count"));
        $alphabet_info.css(
        {
          opacity: 0,
          left: el_pos.left + Math.round(($el.outerWidth() - $alphabet_info.outerWidth()) / 2),
          top: $(this).position().top + $el.outerHeight()
        });
      }).on("mouseleave", "a", function()
      {
        alphabet.find("div.alphabet-info").css("opacity", 0);
      }).on("mouseover", "a", function()
      {
        $('[data-toggle="popover"]').popover('hide');
      });
      table.on("draw.dt.dtAlphabetSearch", function(e, context)
      {
        var api = new $.fn.dataTable.Api(context);
        var col_total = api.columns().nodes().length;
        var rows = api.rows(
        {
          page: "current"
        }).nodes();
        var group_last = null;
        api.column(context.alphabetSearch.column,
        {
          page: "current"
        }).data().each(function(name, index)
        {
          var group = name.toString().replace(/<.*?>/g, "").charAt(0).toUpperCase();
          if (group_last !== group)
          {
            $(rows).eq(index).before('<tr class="alphabet-group"><td colspan="' + col_total + '">' + group + "</td></tr>");
            group_last = group;
          }
        });
        if (!rows.length && context.alphabetSearch)
        {
          var letter = context.alphabetSearch.letter;
          $(api.table().body()).prepend('<tr class="alphabet-group"><td colspan="' + col_total + '">' + letter + "</td></tr>");
        }
      });
      table.on("destroy.dt.dtAlphabetSearch", function(e, context)
      {
        var api = new $.fn.dataTable.Api(context);
        api.off(".dtAlphabetSearch");
      });
      this.node = function()
      {
        return alphabet;
      };
    };

    $.fn.DataTable.AlphabetSearch = $.fn.dataTable.AlphabetSearch;
    $.fn.dataTable.ext.feature.push(
    {
      fnInit: function(settings)
      {
        currentDTid = settings.sInstance
        var search = new $.fn.dataTable.AlphabetSearch(settings);
        return search.node();
      },
      cFeature: "A"
    });
  }(jQuery));
